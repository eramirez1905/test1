# name: Github Actions test

# on:
#   pull_request:
#   push:
#     branches:
#       - airflow

# jobs:
#   test:
#     name: Running Units Tests
#     runs-on: ubuntu-latest

name: Testing Airflow workflow
on:
  push:
    branches:
      - airflow
# jobs:
#   checkout:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@master
#   python_lint:
#     needs: checkout
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@master
#       - uses: actions/setup-python@v2
#         with:
#           python-version: '3.8'
#       - name: Test
#         uses: onichandame/python-test-action@master
#         with:
#           deps_list: 'requirements'
#   styles:
#     needs: python_lint
#     runs-on: ubuntu-18.04
#     name: Linting
#     steps:
#       - uses: actions/checkout@master
#       - uses: actions/setup-python@v1
#       - uses: whynothugo/python-linting@master
  
# name: Testing Airflow workflow
# on:
#   push:
#     branches:
#       - airflow

jobs:

  build-ci-images:
    timeout-minutes: 80
    name: "Build CI images 3.8"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # We need to attempt to build all possible versions here because workflow_run
        # event is run from master for both master and v1-10-tests
        python-version: [3.8]
      fail-fast: true
    steps:
      - name: >
          Checkout 
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          submodules: recursive
      - name: "Retrieve DEFAULTS from the _initialization.sh"
        # We cannot "source" the script here because that would be a security problem (we cannot run
        # any code that comes from the sources coming from the PR. Therefore we extract the
        # DEFAULT_BRANCH and DEFAULT_CONSTRAINTS_BRANCH via custom grep/awk/sed commands
        # Also 2.7 and 3.5 versions are not allowed to proceed on master
        id: defaults
        run: |
          DEFAULT_BRANCH=$(grep "export DEFAULT_BRANCH" scripts/ci/libraries/_initialization.sh | \
            awk 'BEGIN{FS="="} {print $3}' | sed s'/["}]//g')
          echo "DEFAULT_BRANCH=${DEFAULT_BRANCH}" >> $GITHUB_ENV
          DEFAULT_CONSTRAINTS_BRANCH=$(grep "export DEFAULT_CONSTRAINTS_BRANCH" \
            scripts/ci/libraries/_initialization.sh | \
            awk 'BEGIN{FS="="} {print $3}' | sed s'/["}]//g')
          echo "DEFAULT_CONSTRAINTS_BRANCH=${DEFAULT_CONSTRAINTS_BRANCH}" >> $GITHUB_ENV
          if [[ ${DEFAULT_BRANCH} != "v1-10-test" && \
            ( ${PYTHON_MAJOR_MINOR_VERSION} == "2.7" || ${PYTHON_MAJOR_MINOR_VERSION} == "3.5" ) \
          ]]; then
              echo "::set-output name=proceed::false"
          else
              echo "::set-output name=proceed::true"
          fi
      # - name: Initiate GitHub Checks for Building image
      #   # Use the submodule from main, not the PR branch
      #   uses: ./main-airflow/.github/actions/checks-action
      #   id: build-image-check
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     name: "Status of image build CI: ${{ matrix.python-version }}"
      #     status: "in_progress"
      #     sha: ${{ needs.cancel-workflow-runs.outputs.sourceHeadSha }}
      #     details_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #     output: >
      #       {"summary":
      #       "Building the image: CI: ${{ matrix.python-version }}. See the
      #       [Image Build](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #       for details" }
      #   if: steps.defaults.outputs.proceed == 'true'
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
        if: steps.defaults.outputs.proceed == 'true'
      - name: "Build CI images 3.8"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
        if: steps.defaults.outputs.proceed == 'true'

  pytest:
    needs: [build-ci-images]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest ./airflow/dags/test.py

  dagValidation:
    needs: pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: 'Validate DAGs'
        uses: ./
        with:
          requirementsFile: airflow/requirements.txt
          dagPaths: airflow/dags

  createPullRequest:
    needs: dagValidation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Make changes to pull request
        run: date +%s > report.txt

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          commit-message: Update report
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@pedidosya.com>
          signoff: false
          branch: example-patches
          delete-branch: true
          title: '[DTDO] Update report'
          body: |
            Update report
            - Updated with *today's* date
            - Auto-generated by [create-pull-request][1]

          labels: |
            report
            automated pr
          assignees: diego-garcia
          reviewers: estefano-ramirez
          team-reviewers: |
            dataops
          milestone: 1
          draft: false

      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

  # create_PR:
  #   needs: styles
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: upload_files to gcs
  #       uses: ./.github/actions/upload_file
  # upload_file:
  #   needs: styles
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: upload_files to gcs
  #       uses: ./.github/actions/upload_file
  # setup-build-publish-deploy:
  #   name: Setup, Build, Publish, and Deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@master
  
      # Upload file to gcs


      # Example of using the output
      # - name: uploaded-files
      #   if: success()
      #   uses: ./
      #   env:
      #     file: ${{steps.upload-file.outputs.uploaded}}

    # # Configure Docker with Credentials
    # - name: Configure Docker
    #   run: |
    #     gcloud auth configure-docker
      
    # # Build the Docker image
    # - name: Build & Publish
    #   run: |
    #     gcloud config set project ${{ secrets.GCP_PROJECT }}
    #     gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_APPLICATION }}
    #     gcloud config set run/region us-central1
      
    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |
    #     gcloud run deploy ${{ secrets.GCP_APPLICATION }} --image gcr.io/${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_APPLICATION }} \
    #     --platform managed \
    #     --allow-unauthenticated \
    #     --memory 512M

# Using databases and service containers
# If your job requires a database or cache service, you can use the services keyword to create an ephemeral container to host the service; the resulting container is then available to all steps in that job and is removed when the job has completed. This example demonstrates how a job can use services to create a postgres container, and then use node to connect to the service.

# jobs:
#   container-job:
#     runs-on: ubuntu-latest
#     container: node:10.18-jessie
#     services:
#       postgres:
#         image: postgres
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Install dependencies
#         run: npm ci
#       - name: Connect to PostgreSQL
#         run: node client.js
#         env:
#           POSTGRES_HOST: postgres
#           POSTGRES_PORT: 5432
