# name: Github Actions test

# on:
#   pull_request:
#   push:
#     branches:
#       - airflow

# jobs:
#   test:
#     name: Running Units Tests
#     runs-on: ubuntu-latest

name: Testing Airflow workflow
on:
  push:
    branches:
      - airflow
# jobs:
#   checkout:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@master

  
# name: Testing Airflow workflow
# on:
#   push:
#     branches:
#       - airflow

jobs:
  python_lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: ricardochaves/python-lint@v1.3.0
      with:
        python-root-list: "./airflow/dags/"
        use-pylint: false
        use-pycodestyle: false
        use-flake8: true
        use-black: false
        use-mypy: false
        use-isort: false
        extra-pylint-options: ""
        extra-pycodestyle-options: ""
        extra-flake8-options: ""
        extra-black-options: ""
        extra-mypy-options: ""
        extra-isort-options: ""

  # dagValidation:
  #   needs: python_lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: 'Validate DAGs'
  #       uses: ./.github/actions/dag_validation
  #       with:
  #         requirementsFile: airflow/requirements.txt
  #         dagPaths: airflow/dags

  createPullRequest:
    # needs: dagValidation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Make changes to pull request
        run: date +%s > report.txt

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          commit-message: Update report
          committer: PedidosYa <noreply@pedidosya.com>
          author: ${{ github.actor }} <${{ github.actor }}@pedidosya.com>
          signoff: false
          branch: master
          delete-branch: false
          title: '[DTDO] Update report'
          body: |
            Update report
            - Updated with *today's* date
            - Auto-generated by [create-pull-request][1]

          labels: |
            report
            automated pr
          assignees: diego-garcia
          reviewers: estefano-ramirez
          team-reviewers: |
            dataops
          draft: false

      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

  # create_PR:
  #   needs: styles
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: upload_files to gcs
  #       uses: ./.github/actions/upload_file
  # upload_file:
  #   needs: styles
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: upload_files to gcs
  #       uses: ./.github/actions/upload_file
  # setup-build-publish-deploy:
  #   name: Setup, Build, Publish, and Deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@master
  
      # Upload file to gcs


      # Example of using the output
      # - name: uploaded-files
      #   if: success()
      #   uses: ./
      #   env:
      #     file: ${{steps.upload-file.outputs.uploaded}}

    # # Configure Docker with Credentials
    # - name: Configure Docker
    #   run: |
    #     gcloud auth configure-docker
      
    # # Build the Docker image
    # - name: Build & Publish
    #   run: |
    #     gcloud config set project ${{ secrets.GCP_PROJECT }}
    #     gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_APPLICATION }}
    #     gcloud config set run/region us-central1
      
    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |
    #     gcloud run deploy ${{ secrets.GCP_APPLICATION }} --image gcr.io/${{ secrets.GCP_PROJECT }}/${{ secrets.GCP_APPLICATION }} \
    #     --platform managed \
    #     --allow-unauthenticated \
    #     --memory 512M

# Using databases and service containers
# If your job requires a database or cache service, you can use the services keyword to create an ephemeral container to host the service; the resulting container is then available to all steps in that job and is removed when the job has completed. This example demonstrates how a job can use services to create a postgres container, and then use node to connect to the service.

# jobs:
#   container-job:
#     runs-on: ubuntu-latest
#     container: node:10.18-jessie
#     services:
#       postgres:
#         image: postgres
#     steps:
#       - name: Check out repository code
#         uses: actions/checkout@v2
#       - name: Install dependencies
#         run: npm ci
#       - name: Connect to PostgreSQL
#         run: node client.js
#         env:
#           POSTGRES_HOST: postgres
#           POSTGRES_PORT: 5432
